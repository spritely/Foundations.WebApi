// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Functional.cs">
//   Copyright (c) 2015. All rights reserved.
//   Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    ///     Contains methods for converting to/from a secure string.
    /// </summary>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#endif
    internal static partial class Functional
    {
        /// <summary>
        ///     Turns an action into a function so actions can be used like Functions in LINQ code.
        /// </summary>
        /// <typeparam name="T">The type of parameter to the action method.</typeparam>
        /// <param name="action">The action to call.</param>
        /// <returns>A function that calls the action.</returns>
        public static Func<T, object> AsFunc<T>(this Action<T> action)
        {
            if (action == null)
            {
                throw new ArgumentNullException("action");
            }

            return item =>
            {
                action(item);
                return null;
            };
        }

        /// <summary>
        ///     Loops over each element in the source and calls the specified action on it.
        /// </summary>
        /// <typeparam name="T">The type of parameter on the action method.</typeparam>
        /// <param name="source">The source enumerable to iterate.</param>
        /// <param name="action">The action to call with each item.</param>
        public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            if (action == null)
            {
                throw new ArgumentNullException("action");
            }

            source.Select(action.AsFunc()).ToList();
        }
    }
}
