// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ConstructorParametersRequiredContractResolver.cs">
//     Copyright (c) 2016. All rights reserved. Licensed under the MIT license. See LICENSE file in
//     the project root for full license information.
// </copyright>
// <auto-generated>
// Sourced from NuGet package. Will be overwritten with package update except in Spritely.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Spritely.Recipes
{
    using System;
    using System.Globalization;
    using System.Reflection;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Serialization;

    /// <summary>
    /// Resolves member mappings for a type using camel casing property names.
    /// Also requires that constructor parameters are defined in the json string
    /// when deserializing, for types with non-default constructors. 
    /// </summary>
    /// <remarks>
    /// See <a href="https://stackoverflow.com/questions/37416233/json-net-should-not-use-default-values-for-constructor-parameters-should-use-de"/>
    /// </remarks>
#if !RecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Spritely.Recipes", "See package version number")]
#endif
    public class CamelCaseNamesStrictConstructorContractResolver
        : CamelCasePropertyNamesContractResolver
    {
        private static readonly CamelCaseNamesStrictConstructorContractResolver ContractResolverInstance
            = new CamelCaseNamesStrictConstructorContractResolver();

        /// <summary>
        /// As of 7.0.1, Json.NET suggests using a static instance for "stateless" contract resolvers, for performance reasons.
        /// <a href="http://www.newtonsoft.com/json/help/html/ContractResolver.htm"/>
        /// <a href="http://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Serialization_DefaultContractResolver__ctor_1.htm"/>
        /// "Use the parameterless constructor and cache instances of the contract resolver within your application for optimal performance."
        /// Also, <a href="https://stackoverflow.com/questions/33557737/does-json-net-cache-types-serialization-information"/>
        /// </summary>
        public static CamelCaseNamesStrictConstructorContractResolver Instance
        {
            get
            {
                return ContractResolverInstance;
            }
        }

        /// <inheritdoc />
        protected override JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo)
        {
            if (matchingMemberProperty == null)
            {
                string message = parameterInfo == null
                                     ? "All constructor parameters are required; found one that is not specified in json"
                                     : string.Format(
                                         CultureInfo.InvariantCulture,
                                         "This constructor parameter is required, but not specified in json: {0}",
                                         parameterInfo.Name);
                throw new JsonSerializationException(message);
            }

            var property = base.CreatePropertyFromConstructorParameter(matchingMemberProperty, parameterInfo);

            if (property != null)
            {
                var required = matchingMemberProperty.Required;
                if (required == Required.Default)
                {
                    if (matchingMemberProperty.PropertyType != null &&
                        matchingMemberProperty.PropertyType.IsValueType &&
                        Nullable.GetUnderlyingType(matchingMemberProperty.PropertyType) == null)
                    {
                        required = Required.Always;
                    }
                    else
                    {
                        // this does NOT mean that the parameter is not required
                        // the property must be defined in JSON, but can be null
                        required = Required.AllowNull;
                    }

                    property.Required = matchingMemberProperty.Required = required;
                }
            }

            return property;
        }
    }
}
